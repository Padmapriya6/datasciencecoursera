 # Creates a special matrix object that can cache its inverse

makeCacheMatrix <- function( m = matrix() ) {

	## Initialize the inverse property

    a <- NULL

    ## Method to set the matrix

    set <- function( matrix ) {
            m <<- matrix
            a <<- NULL
    }

    ## Method t0 get the matrix

    get <- function() {
    	## Return the matrix
    	m
    }

    ## Method to set the inverse of the matrix

    setInverse <- function(inverse) {
        a <<- inverse
    }

    ## Method to get the inverse of the matrix

    getInverse <- function() {
        ## Return the inverse property
        a
    }

    ## Returning the list of the methods

    list(set = set, get = get,
         setInverse = setInverse,
         getInverse = getInverse)
}



cacheSolve <- function(x, ...) {

    ## Return a matrix that is the inverse of 'x'
    m <- x$getInverse()

    ## Just return the inverse if its already set
    if( !is.null(m) ) {
            message("getting cached data")
            return(m)
    }

    ## Get the matrix from the object
    data <- x$get()

    ## Calculate the inverse using matrix multiplication
    m <- solve(data) %*% data

    ## Set the inverse to the object
    x$setInverse(m)

    ## Return the matrix
    m
}
